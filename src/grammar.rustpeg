use super::ast::Expression;
use std::str::FromStr;

#[pub]
expression -> Expression
    = __ expr:expr_prime __ { expr }

expr_prime -> Expression
    = nvalue:number_lit { Expression::new_int_literal(nvalue) }
	/ svalue:string_lit { Expression::new_str_literal(svalue) }

// number literals
number_lit -> i64
	= "0x" hex_char+ { i64::from_str_radix(&match_str[2..], 16).unwrap() }
	/ "0b" bin_char+ { i64::from_str_radix(&match_str[2..], 2).unwrap() }
	/ "0o" oct_char+ { i64::from_str_radix(&match_str[2..], 8).unwrap() }
    / dec_char+ { i64::from_str(&match_str).unwrap() }

bin_char = [01]
oct_char = [0-8]
hex_char = dec_char / [A-Fa-f]
dec_char = [0-9]

// string literals
string_lit -> String
   = ["] string_char* ["] { match_str[1..match_str.len() - 1].to_string() }

// TODO: support escaping here..
string_char = [^"] 

// whitespace handling
nl_char = [\r\n]
sp_char = [ \t]
_ = sp_char / nl_char
__ = _*
